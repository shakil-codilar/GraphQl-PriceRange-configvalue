#demo info graphql schema

type Query {
        brand: [Brand] @resolver(class: "Codilar\\GraphQlDemo\\Model\\Resolver\\BrandResolver") @doc(description: "Get Brand collection of a store")
        productsWithBrand (id: Int @doc(description: "Id of the  brand")): [ProductsWithBrand] @resolver(class: "Codilar\\GraphQlDemo\\Model\\Resolver\\ProductResolver") @doc(description: "The CMS page query returns information about a CMS page") @cache(cacheIdentity: "Magento\\CmsGraphQl\\Model\\Resolver\\Page\\Identity")
        collections (
                brand_id:Int
            ): Collections
            @resolver(class: "Codilar\\GraphQlDemo\\Model\\Resolver\\ItemResolver") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes.") @cache(cacheIdentity: "Magento\\CatalogGraphQl\\Model\\Resolver\\Product\\Identity")
        productsWithPrice(
            price: PriceFilterInput
        ):ProductsWithPrice @resolver(class: "Codilar\\GraphQlDemo\\Model\\Resolver\\ProductPriceResolver") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes.") @cache(cacheIdentity: "Magento\\CatalogGraphQl\\Model\\Resolver\\Product\\Identity")
        }

        input PriceFilterInput {
        from:String
        to:String
        }

    type Brand {
        id:Int @doc(description: "Get Brand id")
        is_active: Int @doc (description: "Get Brand Status")
        name:String @doc(description: "Get Brand name")
        information: String @doc(description: "Get Brand Information")
    }

    type ProductsWithBrand {
        sku: String @doc(description: "Get Product sku")
        name: String @doc(description: "Get Product name")
        price: Float @doc(description: "Get Product price")
        brand: String @doc(description: "Get Product brand")
    }

    type Collections @doc(description: "The Products object is the top-level object returned in a product search.") {
    total_count: Int @doc(description: "The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not.")
    items: [ProductInterface] @doc(description: "An array of products that match the specified search criteria.")
    }

    type ProductsWithPrice @doc(description: "The Products object is the top-level object returned in a product search.") {
        items: [ProductInterface] @doc(description: "An array of products that match the specified search criteria.")
        }

